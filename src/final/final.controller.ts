import { Controller, Post } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { ImmichService } from '../immich/immich.service';
import { ImageCompressionService } from '../image-compression/image-compression.service';
import { TelegramService } from '../telegram/telegram.service';
import * as fs from 'fs';

@Controller('final')
export class FinalController {
  constructor(
    private readonly immichService: ImmichService,
    private readonly imageCompressionService: ImageCompressionService,
    private readonly telegramService: TelegramService,
    private readonly configService: ConfigService,
  ) {}

  @Post('send-random-photos')
  async sendRandomPhotos() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º 10 —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
      const photos = await this.immichService.downloadRandomPhotos(10);

      // –°–∂–∏–º–∞–µ–º –∫–∞–∂–¥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–æ 1920px —Å —É—á–µ—Ç–æ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
      for (const photo of photos) {
        const orientationStr = photo.assetInfo.exifInfo?.orientation;
        const orientation = orientationStr ? parseInt(orientationStr, 10) : undefined;
        await this.imageCompressionService.compress(photo.filePath, {
          orientation: orientation,
        });
      }

      // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ assetInfo —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ Immich
      const immichBaseUrl = this.configService.get<string>('IMMICH_PUBLIC_URL');
      const descriptions = photos.map(photo => {
        const info = photo.assetInfo;
        const country = info.exifInfo?.country;
        const city = info.exifInfo?.city;
        const dateTimeOriginal = info.exifInfo?.dateTimeOriginal;

        let dateStr = 'Unknown';
        if (dateTimeOriginal) {
          const date = new Date(dateTimeOriginal);
          dateStr = date.toLocaleDateString('en-US', {
            month: 'long',
            year: 'numeric',
          });
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ: —Å—Ç—Ä–∞–Ω–∞ –∏ –≥–æ—Ä–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å, –ø–æ—Ç–æ–º –¥–∞—Ç–∞
        let description = '';

        // –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        let shortCountry = country;
        let shortCity = city;

        if (country === 'Russian Federation') {
          shortCountry = 'Russia';
        }

        if (city === 'Saint Petersburg') {
          shortCity = 'Saint P.';
        }

        if (shortCountry && shortCity) {
          description = `${shortCountry}, ${shortCity}, ${dateStr}`;
        } else if (shortCountry) {
          description = `${shortCountry}, ${dateStr}`;
        } else if (shortCity) {
          description = `${shortCity}, ${dateStr}`;
        } else {
          description = dateStr;
        }

        return description;
      });

      const emojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'];
      const caption = ``;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ Telegram
      const photoPaths = photos.map(photo => photo.filePath);
      const result = await this.telegramService.sendPhotos(photoPaths, caption);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ Immich –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      const linksMessage = `${photos
        .map((photo, index) => {
          const immichUrl = `${immichBaseUrl}/photos/${photo.asset.id}`;
          const description = descriptions[index];
          return `${emojis[index]} <a href="${immichUrl}">${description}</a>`;
        })
        .join('\n')}`;

      await this.telegramService.sendMessage(linksMessage, 'HTML');

      // –í—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ Immich –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('\n=== IMMICH LINKS ===');
      console.log(linksMessage);
      console.log('===================\n');

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
      for (const photo of photos) {
        try {
          if (fs.existsSync(photo.filePath)) {
            fs.unlinkSync(photo.filePath);
          }
        } catch (error) {
          console.error(`Failed to delete file ${photo.filePath}:`, error);
        }
      }

      return {
        success: true,
        message: `Successfully sent ${photos.length} random photos to Telegram`,
        photos: photos.map(photo => ({
          id: photo.asset.id,
          path: photo.filePath,
          description: descriptions[photos.indexOf(photo)],
        })),
        result,
      };
    } catch (error) {
      console.error('Error in sendRandomPhotos:', error);
      throw error;
    }
  }
}
